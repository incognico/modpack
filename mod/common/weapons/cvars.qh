#pragma once

// highest bit used in Xonotic is 16
const int WEP_FLAG_MODWEAPON = BIT(23); // indicates that this wepaon was added by the mod
.string m_replacement;

#ifdef CSQC
string strreplace_word(string search, string replace, string subject)
{
    string newval = "";
    FOREACH_WORD(subject, true,
    {
        if(it == search)
            newval = cons(newval, replace);
        else
            newval = cons(newval, it);
    });
    return newval;
}

STATIC_INIT(fix_weaponpriority)
{
    string curprio = cvar_string("cl_weaponpriority");
    string newprio = "";
    bool did_replacement = false;
    FOREACH(Weapons, it != WEP_Null && (it.spawnflags & WEP_FLAG_MODWEAPON) && it.m_replacement && it.m_replacement != "",
    {
        if(!strhasword(curprio, it.netname))
        {
            // we need this weapon in the cvar!
            newprio = strreplace_word(it.m_replacement, cons(it.m_replacement, it.netname), curprio);
            did_replacement = true;
        }
    });

    if(did_replacement) // one weapon was replacem
        cvar_set("cl_weaponpriority", newprio);
}
#endif

#define W_MOD_PROPS(L, class, prefix) \
    L(W_PROP_BEGIN, W_MOD_PROP, W_MOD_PROP_END, class, prefix) \
    L(W_CONFIG_BEGIN, W_CONFIG, W_CONFIG_END, class, prefix) \
    L(W_UPDATE_BEGIN, W_UPDATE, W_UPDATE_END, class, prefix) \
    L(W_NET_BEGIN, W_NET, W_NET_END, class, prefix) \
    /**/ \

    #define W_MOD_PROP(class, wepname, fld, T, m)       W_MOD_PROP_##m(class, fld, T, wepname)
    #define W_MOD_PROP_NONE(class, fld, T, wepname)     _W_MOD_PROP(class, fld, T, wepname)
    #define W_MOD_PROP_PRI(class, fld, T, wepname)      _W_MOD_PROP(class, primary_##fld, T, wepname)
    #define W_MOD_PROP_SEC(class, fld, T, wepname)      _W_MOD_PROP(class, secondary_##fld, T, wepname)
    #define W_MOD_PROP_BOTH(class, fld, T, wepname) \
            W_MOD_PROP_PRI(class, fld, T, wepname) \
            W_MOD_PROP_SEC(class, fld, T, wepname)
	#define W_MOD_PROP_BEGIN(class)
		#ifdef GAMEQC
			#define _W_MOD_PROP(class, fld, T, wepname) \
				/* not needed (hack) T _W_MOD_PROP_CVAR(wepname, fld);*/ \
				ATTRIB(class, wepvar_##fld, T, _W_MOD_PROP_CVAR(wepname, fld));
			#define _W_MOD_PROP_CVAR(wepname, fld) autocvar_g_balance_##wepname##_##fld
		#else
			#define _W_MOD_PROP(class, fld, T, wepname)
			#define _W_MOD_PROP_CVAR(wepname, fld)
		#endif
	#define W_MOD_PROP_END()
